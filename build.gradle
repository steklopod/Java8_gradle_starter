buildscript {
    ext {
        springBootVersion = '2.1.0.M2'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
        classpath "com.kncept.junit5.reporter:junit-reporter:1.2.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"// dependencyUpdates
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2" //SonarQube analysis
        classpath "gradle.plugin.com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE" //long class-path fixing
    }
}
plugins {
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.kncept.junit5.reporter'
apply plugin: "com.github.ManifestClasspath"
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.junit.platform.gradle.plugin'
//apply plugin: 'war'

group = 'ru.steklopod'
version = '1.0'
archivesBaseName = 'user-app'

sourceCompatibility = 1.8
ext {
    assertJVersion = '3.11.1'
    junitJupiterVersion = '5.3.1'
    junitPlatformVersion = '1.3.1'
    junitVintageVersion = '5.1.0'
    lombokVersion = '1.18.2'
    springBootVersion = '2.1.0.M2'
    JUNIT_VERSION = '4.12'
}
ext['spring.version'] = '5.0.4.RELEASE'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://jitpack.io' }
    jcenter()
}

dependencies {
//    compile project(':site-model')

    compile("org.springframework.boot:spring-boot-starter",
            "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-rest",
            "org.mockito:mockito-core:2.22.0",
            "io.github.benas:random-beans:3.7.0",
            "io.github.glytching:junit-extensions:2.3.0",
            "org.tuxdude.logback.extensions:logback-colorizer:1.0.1",
            "me.tongfei:progressbar:0.7.1",
            "org.apache.commons:commons-lang3:3.8",
            // https://mvnrepository.com/artifact/org.apache.commons/commons-io
             "org.apache.commons:commons-io:1.3.2"
    )


    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    runtime("org.springframework.boot:spring-boot-devtools")

    testCompile("org.springframework.boot:spring-boot-starter-test",
            "io.github.glytching:junit-extensions:2.1.0",
            "com.github.sbrannen:spring-test-junit5:1.3.0",
            "junit:junit:${JUNIT_VERSION}",
            "org.assertj:assertj-core:${assertJVersion}",
            "name.falgout.jeffrey.testing.junit5:mockito-extension:1.0.2",
            "org.jetbrains.spek:spek-junit-platform-engine:1.2.1",
            // Needed for @RunWith(JUnitPlatform.class) in the IDE
            "org.junit.platform:junit-platform-runner:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-console:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-console-standalone:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-suite-api:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-commons:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-engine:${junitPlatformVersion}",
            "org.junit.platform:junit-platform-surefire-provider:${junitPlatformVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}",
            "org.junit.jupiter:junit-jupiter-migrationsupport:${junitJupiterVersion}",
    )
    testRuntime(
            "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}",
            "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}",
            "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}
